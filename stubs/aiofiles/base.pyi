from _typeshed import Incomplete
from collections.abc import Coroutine, Generator
from types import coroutine as coroutine

class AsyncBase:
    def __init__(self, file, loop, executor) -> None: ...
    def __aiter__(self): ...
    async def __anext__(self): ...

class AsyncIndirectBase(AsyncBase):
    def __init__(self, name, loop, executor, indirect) -> None: ...

class _ContextManager(Coroutine):
    def __init__(self, coro) -> None: ...
    def send(self, value): ...
    def throw(self, typ, val: Incomplete | None = None, tb: Incomplete | None = None): ...
    def close(self): ...
    @property
    def gi_frame(self): ...
    @property
    def gi_running(self): ...
    @property
    def gi_code(self): ...
    def __next__(self): ...
    @coroutine
    def __iter__(self): ...
    def __await__(self) -> Generator[Incomplete, Incomplete, Incomplete]: ...
    async def __anext__(self): ...
    async def __aenter__(self): ...
    async def __aexit__(self, exc_type, exc, tb) -> None: ...

class AiofilesContextManager(_ContextManager):
    async def __aexit__(self, exc_type, exc_val, exc_tb) -> None: ...
