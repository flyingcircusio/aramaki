from ..base import AiofilesContextManager
from _typeshed import Incomplete

__all__ = ['NamedTemporaryFile', 'TemporaryFile', 'SpooledTemporaryFile', 'TemporaryDirectory']

def NamedTemporaryFile(mode: str = 'w+b', buffering: int = -1, encoding: Incomplete | None = None, newline: Incomplete | None = None, suffix: Incomplete | None = None, prefix: Incomplete | None = None, dir: Incomplete | None = None, delete: bool = True, loop: Incomplete | None = None, executor: Incomplete | None = None): ...
def TemporaryFile(mode: str = 'w+b', buffering: int = -1, encoding: Incomplete | None = None, newline: Incomplete | None = None, suffix: Incomplete | None = None, prefix: Incomplete | None = None, dir: Incomplete | None = None, loop: Incomplete | None = None, executor: Incomplete | None = None): ...
def SpooledTemporaryFile(max_size: int = 0, mode: str = 'w+b', buffering: int = -1, encoding: Incomplete | None = None, newline: Incomplete | None = None, suffix: Incomplete | None = None, prefix: Incomplete | None = None, dir: Incomplete | None = None, loop: Incomplete | None = None, executor: Incomplete | None = None): ...
def TemporaryDirectory(suffix: Incomplete | None = None, prefix: Incomplete | None = None, dir: Incomplete | None = None, loop: Incomplete | None = None, executor: Incomplete | None = None): ...

class AiofilesContextManagerTempDir(AiofilesContextManager):
    async def __aenter__(self): ...
