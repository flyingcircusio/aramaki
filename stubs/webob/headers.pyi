from _typeshed import Incomplete
from webob.compat import MutableMapping
from webob.multidict import MultiDict

__all__ = ['ResponseHeaders', 'EnvironHeaders']

class ResponseHeaders(MultiDict):
    def __getitem__(self, key): ...
    def getall(self, key): ...
    def mixed(self): ...
    def dict_of_lists(self): ...
    def __setitem__(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __contains__(self, key) -> bool: ...
    has_key = __contains__
    def setdefault(self, key, default: Incomplete | None = None): ...
    def pop(self, key, *args): ...

class EnvironHeaders(MutableMapping):
    environ: Incomplete
    def __init__(self, environ) -> None: ...
    def __getitem__(self, hname): ...
    def __setitem__(self, hname, value) -> None: ...
    def __delitem__(self, hname) -> None: ...
    def keys(self): ...
    def __contains__(self, hname) -> bool: ...
    def __len__(self) -> int: ...
    def __iter__(self): ...
