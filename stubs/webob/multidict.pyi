from _typeshed import Incomplete
from collections.abc import Generator
from webob.compat import MutableMapping

__all__ = ['MultiDict', 'NestedMultiDict', 'NoVars', 'GetDict']

class MultiDict(MutableMapping):
    def __init__(self, *args, **kw) -> None: ...
    @classmethod
    def view_list(cls, lst): ...
    @classmethod
    def from_fieldstorage(cls, fs): ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value) -> None: ...
    def add(self, key, value) -> None: ...
    def getall(self, key): ...
    def getone(self, key): ...
    def mixed(self): ...
    def dict_of_lists(self): ...
    def __delitem__(self, key) -> None: ...
    def __contains__(self, key) -> bool: ...
    has_key = __contains__
    def clear(self) -> None: ...
    def copy(self): ...
    def setdefault(self, key, default: Incomplete | None = None): ...
    def pop(self, key, *args): ...
    def popitem(self): ...
    def update(self, *args, **kw) -> None: ...
    def extend(self, other: Incomplete | None = None, **kwargs) -> None: ...
    def __len__(self) -> int: ...
    def iterkeys(self) -> Generator[Incomplete, None, None]: ...
    keys = iterkeys
    __iter__ = iterkeys
    def iteritems(self): ...
    items = iteritems
    def itervalues(self) -> Generator[Incomplete, None, None]: ...
    values = itervalues

class GetDict(MultiDict):
    env: Incomplete
    def __init__(self, data, env) -> None: ...
    def on_change(self): ...
    def __setitem__(self, key, value) -> None: ...
    def add(self, key, value) -> None: ...
    def __delitem__(self, key) -> None: ...
    def clear(self) -> None: ...
    def setdefault(self, key, default: Incomplete | None = None): ...
    def pop(self, key, *args): ...
    def popitem(self): ...
    def update(self, *args, **kwargs) -> None: ...
    def extend(self, *args, **kwargs) -> None: ...
    def copy(self): ...

class NestedMultiDict(MultiDict):
    dicts: Incomplete
    def __init__(self, *dicts) -> None: ...
    def __getitem__(self, key): ...
    __setitem__: Incomplete
    add: Incomplete
    __delitem__: Incomplete
    clear: Incomplete
    setdefault: Incomplete
    pop: Incomplete
    popitem: Incomplete
    update: Incomplete
    def getall(self, key): ...
    def copy(self): ...
    def __contains__(self, key) -> bool: ...
    has_key = __contains__
    def __len__(self) -> int: ...
    def __nonzero__(self): ...
    def iteritems(self) -> Generator[Incomplete, None, None]: ...
    items = iteritems
    def itervalues(self) -> Generator[Incomplete, None, None]: ...
    values = itervalues
    def __iter__(self): ...
    iterkeys = __iter__
    keys = iterkeys

class NoVars:
    reason: Incomplete
    def __init__(self, reason: Incomplete | None = None) -> None: ...
    def __getitem__(self, key) -> None: ...
    def __setitem__(self, *args, **kw) -> None: ...
    add = __setitem__
    setdefault = __setitem__
    update = __setitem__
    def __delitem__(self, *args, **kw) -> None: ...
    clear = __delitem__
    pop = __delitem__
    popitem = __delitem__
    def get(self, key, default: Incomplete | None = None): ...
    def getall(self, key): ...
    def getone(self, key): ...
    def mixed(self): ...
    dict_of_lists = mixed
    def __contains__(self, key) -> bool: ...
    has_key = __contains__
    def copy(self): ...
    def __len__(self) -> int: ...
    def iterkeys(self): ...
    keys = iterkeys
    items = iterkeys
    values = iterkeys
    __iter__ = iterkeys
