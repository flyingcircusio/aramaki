import pkg_resources
from _typeshed import Incomplete
from pyramid.interfaces import IAssetDescriptor as IAssetDescriptor

init_names: Incomplete

def caller_path(path, level: int = 2): ...
def caller_module(level: int = 2, sys=...): ...
def package_name(pkg_or_module): ...
def package_of(pkg_or_module): ...
def caller_package(level: int = 2, caller_module=...): ...
def package_path(package): ...

class _CALLER_PACKAGE: ...

CALLER_PACKAGE: Incomplete

class Resolver:
    package: Incomplete
    def __init__(self, package=...) -> None: ...
    def get_package_name(self): ...
    def get_package(self): ...

class AssetResolver(Resolver):
    def resolve(self, spec): ...

class DottedNameResolver(Resolver):
    def resolve(self, dotted): ...
    def maybe_resolve(self, dotted): ...

class PkgResourcesAssetDescriptor:
    pkg_resources = pkg_resources
    pkg_name: Incomplete
    path: Incomplete
    def __init__(self, pkg_name, path) -> None: ...
    def absspec(self): ...
    def abspath(self): ...
    def stream(self): ...
    def isdir(self): ...
    def listdir(self): ...
    def exists(self): ...

class FSAssetDescriptor:
    path: Incomplete
    def __init__(self, path) -> None: ...
    def absspec(self) -> None: ...
    def abspath(self): ...
    def stream(self): ...
    def isdir(self): ...
    def listdir(self): ...
    def exists(self): ...
