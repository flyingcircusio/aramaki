from _typeshed import Incomplete
from pyramid.asset import abspath_from_asset_spec as abspath_from_asset_spec, resolve_asset_spec as resolve_asset_spec
from pyramid.httpexceptions import HTTPMovedPermanently as HTTPMovedPermanently, HTTPNotFound as HTTPNotFound
from pyramid.path import caller_package as caller_package
from pyramid.response import FileResponse as FileResponse
from pyramid.traversal import traversal_path_info as traversal_path_info

class static_view:
    cache_max_age: Incomplete
    use_subpath: Incomplete
    package_name: Incomplete
    docroot: Incomplete
    norm_docroot: Incomplete
    index: Incomplete
    reload: Incomplete
    content_encodings: Incomplete
    filemap: Incomplete
    def __init__(self, root_dir, cache_max_age: int = 3600, package_name: Incomplete | None = None, use_subpath: bool = False, index: str = 'index.html', reload: bool = False, content_encodings=()) -> None: ...
    def __call__(self, context, request): ...
    def get_resource_name(self, request): ...
    def find_resource_path(self, name): ...
    def get_possible_files(self, resource_name): ...
    def find_best_match(self, request, files): ...
    def add_slash_redirect(self, request): ...

class QueryStringCacheBuster:
    param: Incomplete
    def __init__(self, param: str = 'x') -> None: ...
    def __call__(self, request, subpath, kw): ...

class QueryStringConstantCacheBuster(QueryStringCacheBuster):
    def __init__(self, token, param: str = 'x') -> None: ...
    def tokenize(self, request, subpath, kw): ...

class ManifestCacheBuster:
    exists: Incomplete
    getmtime: Incomplete
    manifest_path: Incomplete
    reload: Incomplete
    def __init__(self, manifest_spec, reload: bool = False) -> None: ...
    def get_manifest(self): ...
    def parse_manifest(self, content): ...
    @property
    def manifest(self): ...
    def __call__(self, request, subpath, kw): ...
