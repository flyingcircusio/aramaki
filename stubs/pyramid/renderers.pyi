from _typeshed import Incomplete
from pyramid.csrf import get_csrf_token as get_csrf_token
from pyramid.decorator import reify as reify
from pyramid.events import BeforeRender as BeforeRender
from pyramid.httpexceptions import HTTPBadRequest as HTTPBadRequest
from pyramid.interfaces import IJSONAdapter as IJSONAdapter, IRendererFactory as IRendererFactory, IRendererInfo as IRendererInfo
from pyramid.path import caller_package as caller_package
from pyramid.threadlocal import get_current_registry as get_current_registry
from pyramid.util import hide_attrs as hide_attrs

def render(renderer_name, value, request: Incomplete | None = None, package: Incomplete | None = None): ...
def render_to_response(renderer_name, value, request: Incomplete | None = None, package: Incomplete | None = None, response: Incomplete | None = None): ...
def get_renderer(renderer_name, package: Incomplete | None = None, registry: Incomplete | None = None): ...
def string_renderer_factory(info): ...

class JSON:
    serializer: Incomplete
    kw: Incomplete
    components: Incomplete
    def __init__(self, serializer=..., adapters=(), **kw) -> None: ...
    def add_adapter(self, type_or_iface, adapter) -> None: ...
    def __call__(self, info): ...

json_renderer_factory: Incomplete
JSONP_VALID_CALLBACK: Incomplete

class JSONP(JSON):
    param_name: Incomplete
    def __init__(self, param_name: str = 'callback', **kw) -> None: ...
    def __call__(self, info): ...

class RendererHelper:
    name: Incomplete
    package: Incomplete
    type: Incomplete
    registry: Incomplete
    def __init__(self, name: Incomplete | None = None, package: Incomplete | None = None, registry: Incomplete | None = None) -> None: ...
    def settings(self): ...
    def renderer(self): ...
    def get_renderer(self): ...
    def render_view(self, request, response, view, context): ...
    def render(self, value, system_values, request: Incomplete | None = None): ...
    def render_to_response(self, value, system_values, request: Incomplete | None = None): ...
    def clone(self, name: Incomplete | None = None, package: Incomplete | None = None, registry: Incomplete | None = None): ...

class NullRendererHelper(RendererHelper):
    name: Incomplete
    package: Incomplete
    type: str
    registry: Incomplete
    def __init__(self, name: Incomplete | None = None, package: Incomplete | None = None, registry: Incomplete | None = None) -> None: ...
    @property
    def settings(self): ...
    def render_view(self, request, value, view, context): ...
    def render(self, value, system_values, request: Incomplete | None = None): ...
    def render_to_response(self, value, system_values, request: Incomplete | None = None): ...
    def clone(self, name: Incomplete | None = None, package: Incomplete | None = None, registry: Incomplete | None = None): ...

null_renderer: Incomplete
