from _typeshed import Incomplete
from pyramid.authorization import Authenticated as Authenticated, Everyone as Everyone
from pyramid.interfaces import IAuthenticationPolicy as IAuthenticationPolicy, IDebugLogger as IDebugLogger
from pyramid.util import SimpleSerializer as SimpleSerializer, ascii_ as ascii_, bytes_ as bytes_, strings_differ as strings_differ, text_ as text_
from typing import NamedTuple

VALID_TOKEN: Incomplete

class CallbackAuthenticationPolicy:
    debug: bool
    callback: Incomplete
    def authenticated_userid(self, request): ...
    def effective_principals(self, request): ...

class RepozeWho1AuthenticationPolicy(CallbackAuthenticationPolicy):
    identifier_name: Incomplete
    callback: Incomplete
    def __init__(self, identifier_name: str = 'auth_tkt', callback: Incomplete | None = None) -> None: ...
    def authenticated_userid(self, request): ...
    def unauthenticated_userid(self, request): ...
    def effective_principals(self, request): ...
    def remember(self, request, userid, **kw): ...
    def forget(self, request): ...

class RemoteUserAuthenticationPolicy(CallbackAuthenticationPolicy):
    environ_key: Incomplete
    callback: Incomplete
    debug: Incomplete
    def __init__(self, environ_key: str = 'REMOTE_USER', callback: Incomplete | None = None, debug: bool = False) -> None: ...
    def unauthenticated_userid(self, request): ...
    def remember(self, request, userid, **kw): ...
    def forget(self, request): ...

class AuthTktAuthenticationPolicy(CallbackAuthenticationPolicy):
    cookie: Incomplete
    callback: Incomplete
    debug: Incomplete
    def __init__(self, secret, callback: Incomplete | None = None, cookie_name: str = 'auth_tkt', secure: bool = False, include_ip: bool = False, timeout: Incomplete | None = None, reissue_time: Incomplete | None = None, max_age: Incomplete | None = None, path: str = '/', http_only: bool = False, wild_domain: bool = True, debug: bool = False, hashalg: str = 'sha512', parent_domain: bool = False, domain: Incomplete | None = None, samesite: str = 'Lax') -> None: ...
    def unauthenticated_userid(self, request): ...
    def remember(self, request, userid, **kw): ...
    def forget(self, request): ...

def b64encode(v): ...
def b64decode(v): ...

class AuthTicket:
    secret: Incomplete
    userid: Incomplete
    ip: Incomplete
    tokens: Incomplete
    user_data: Incomplete
    time: Incomplete
    cookie_name: Incomplete
    secure: Incomplete
    hashalg: Incomplete
    def __init__(self, secret, userid, ip, tokens=(), user_data: str = '', time: Incomplete | None = None, cookie_name: str = 'auth_tkt', secure: bool = False, hashalg: str = 'md5') -> None: ...
    def digest(self): ...
    def cookie_value(self): ...

class BadTicket(Exception):
    expected: Incomplete
    def __init__(self, msg, expected: Incomplete | None = None) -> None: ...

def parse_ticket(secret, ticket, ip, hashalg: str = 'md5'): ...
def calculate_digest(ip, timestamp, secret, userid, tokens, user_data, hashalg: str = 'md5'): ...
def encode_ip_timestamp(ip, timestamp): ...

class AuthTktCookieHelper:
    parse_ticket: Incomplete
    AuthTicket = AuthTicket
    BadTicket = BadTicket
    now: Incomplete
    userid_type_decoders: Incomplete
    userid_type_encoders: Incomplete
    cookie_profile: Incomplete
    secret: Incomplete
    cookie_name: Incomplete
    secure: Incomplete
    include_ip: Incomplete
    timeout: Incomplete
    reissue_time: Incomplete
    max_age: Incomplete
    wild_domain: Incomplete
    parent_domain: Incomplete
    domain: Incomplete
    hashalg: Incomplete
    def __init__(self, secret, cookie_name: str = 'auth_tkt', secure: bool = False, include_ip: bool = False, timeout: Incomplete | None = None, reissue_time: Incomplete | None = None, max_age: Incomplete | None = None, http_only: bool = False, path: str = '/', wild_domain: bool = True, hashalg: str = 'sha512', parent_domain: bool = False, domain: Incomplete | None = None, samesite: str = 'Lax') -> None: ...
    def identify(self, request): ...
    def forget(self, request): ...
    def remember(self, request, userid, max_age: Incomplete | None = None, tokens=()): ...

class SessionAuthenticationPolicy(CallbackAuthenticationPolicy):
    callback: Incomplete
    debug: Incomplete
    helper: Incomplete
    def __init__(self, prefix: str = 'auth.', callback: Incomplete | None = None, debug: bool = False) -> None: ...
    def remember(self, request, userid, **kw): ...
    def forget(self, request): ...
    def unauthenticated_userid(self, request): ...

class SessionAuthenticationHelper:
    userid_key: Incomplete
    def __init__(self, prefix: str = 'auth.') -> None: ...
    def remember(self, request, userid, **kw): ...
    def forget(self, request, **kw): ...
    def authenticated_userid(self, request): ...

class BasicAuthAuthenticationPolicy(CallbackAuthenticationPolicy):
    check: Incomplete
    realm: Incomplete
    debug: Incomplete
    def __init__(self, check, realm: str = 'Realm', debug: bool = False) -> None: ...
    def unauthenticated_userid(self, request): ...
    def remember(self, request, userid, **kw): ...
    def forget(self, request): ...
    def callback(self, username, request): ...

class HTTPBasicCredentials(NamedTuple):
    username: Incomplete
    password: Incomplete

def extract_http_basic_credentials(request): ...
