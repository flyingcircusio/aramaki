from _typeshed import Incomplete
from collections.abc import Generator
from pyramid.path import DottedNameResolver as _DottedNameResolver

WIN: Incomplete
PYPY: bool

class DottedNameResolver(_DottedNameResolver):
    def __init__(self, package: Incomplete | None = None) -> None: ...

def text_(s, encoding: str = 'latin-1', errors: str = 'strict'): ...
def bytes_(s, encoding: str = 'latin-1', errors: str = 'strict'): ...
def ascii_(s): ...
def is_nonstr_iter(v): ...
def is_string_or_iterable(v): ...
def as_sorted_tuple(val): ...

class SettableProperty:
    wrapped: Incomplete
    def __init__(self, wrapped) -> None: ...
    def __get__(self, obj, type: Incomplete | None = None): ...

class InstancePropertyHelper:
    properties: Incomplete
    def __init__(self) -> None: ...
    @classmethod
    def make_property(cls, callable, name: Incomplete | None = None, reify: bool = False): ...
    @classmethod
    def apply_properties(cls, target, properties) -> None: ...
    @classmethod
    def set_property(cls, target, callable, name: Incomplete | None = None, reify: bool = False) -> None: ...
    def add_property(self, callable, name: Incomplete | None = None, reify: bool = False) -> None: ...
    def apply(self, target) -> None: ...

class InstancePropertyMixin:
    def set_property(self, callable, name: Incomplete | None = None, reify: bool = False) -> None: ...

class WeakOrderedSet:
    def __init__(self) -> None: ...
    def add(self, item): ...
    def remove(self, item) -> None: ...
    def empty(self) -> None: ...
    def __len__(self) -> int: ...
    def __contains__(self, item) -> bool: ...
    def __iter__(self): ...
    @property
    def last(self): ...

def strings_differ(string1, string2): ...
def object_description(object): ...
def shortrepr(object, closer): ...

class Sentinel:
    repr: Incomplete
    def __init__(self, repr) -> None: ...

FIRST: Incomplete
LAST: Incomplete

class TopologicalSorter:
    names: Incomplete
    req_before: Incomplete
    req_after: Incomplete
    name2before: Incomplete
    name2after: Incomplete
    name2val: Incomplete
    order: Incomplete
    default_before: Incomplete
    default_after: Incomplete
    first: Incomplete
    last: Incomplete
    def __init__(self, default_before=..., default_after: Incomplete | None = None, first=..., last=...) -> None: ...
    def values(self): ...
    def remove(self, name) -> None: ...
    def add(self, name, val, after: Incomplete | None = None, before: Incomplete | None = None) -> None: ...
    def sorted(self): ...

def get_callable_name(name): ...
def hide_attrs(obj, *attrs) -> Generator[None, None, None]: ...
def is_same_domain(host, pattern): ...
def make_contextmanager(fn): ...
def takes_one_arg(callee, attr: Incomplete | None = None, argname: Incomplete | None = None): ...

class SimpleSerializer:
    def loads(self, bstruct): ...
    def dumps(self, appstruct): ...

def is_bound_method(ob): ...
def is_unbound_method(fn): ...
def reraise(tp, value, tb: Incomplete | None = None) -> None: ...
