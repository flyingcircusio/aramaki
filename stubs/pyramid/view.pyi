import venusian
from _typeshed import Incomplete
from pyramid.exceptions import ConfigurationError as ConfigurationError, PredicateMismatch as PredicateMismatch
from pyramid.httpexceptions import HTTPNotFound as HTTPNotFound, HTTPTemporaryRedirect as HTTPTemporaryRedirect, default_exceptionresponse_view as default_exceptionresponse_view
from pyramid.interfaces import IExceptionViewClassifier as IExceptionViewClassifier, IMultiView as IMultiView, IRequest as IRequest, IRoutesMapper as IRoutesMapper, ISecuredView as ISecuredView, IView as IView, IViewClassifier as IViewClassifier
from pyramid.threadlocal import get_current_registry as get_current_registry, manager as manager
from pyramid.util import hide_attrs as hide_attrs

def render_view_to_response(context, request, name: str = '', secure: bool = True): ...
def render_view_to_iterable(context, request, name: str = '', secure: bool = True): ...
def render_view(context, request, name: str = '', secure: bool = True): ...

class view_config:
    venusian = venusian
    def __init__(self, **settings) -> None: ...
    def __call__(self, wrapped): ...
bfg_view = view_config

def view_defaults(**settings): ...

class AppendSlashNotFoundViewFactory:
    notfound_view: Incomplete
    redirect_class: Incomplete
    def __init__(self, notfound_view: Incomplete | None = None, redirect_class=...) -> None: ...
    def __call__(self, context, request): ...

append_slash_notfound_view: Incomplete

class notfound_view_config:
    venusian = venusian
    def __init__(self, **settings) -> None: ...
    def __call__(self, wrapped): ...

class forbidden_view_config:
    venusian = venusian
    def __init__(self, **settings) -> None: ...
    def __call__(self, wrapped): ...

class exception_view_config:
    venusian = venusian
    def __init__(self, *args, **settings) -> None: ...
    def __call__(self, wrapped): ...

class ViewMethodsMixin:
    def invoke_exception_view(self, exc_info: Incomplete | None = None, request: Incomplete | None = None, secure: bool = True, reraise: bool = False): ...
