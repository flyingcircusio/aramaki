import gettext
from _typeshed import Incomplete
from pyramid.decorator import reify as reify
from pyramid.interfaces import ILocaleNegotiator as ILocaleNegotiator, ILocalizer as ILocalizer, ITranslationDirectories as ITranslationDirectories
from pyramid.threadlocal import get_current_registry as get_current_registry
from translationstring import TranslationString, TranslationStringFactory

TranslationString = TranslationString
TranslationStringFactory = TranslationStringFactory
DEFAULT_PLURAL: Incomplete

class Localizer:
    locale_name: Incomplete
    translations: Incomplete
    pluralizer: Incomplete
    translator: Incomplete
    def __init__(self, locale_name, translations) -> None: ...
    def translate(self, tstring, domain: Incomplete | None = None, mapping: Incomplete | None = None): ...
    def pluralize(self, singular, plural, n, domain: Incomplete | None = None, mapping: Incomplete | None = None): ...

def default_locale_negotiator(request): ...
def negotiate_locale_name(request): ...
def get_locale_name(request): ...
def make_localizer(current_locale_name, translation_directories): ...
def get_localizer(request): ...

class Translations(gettext.GNUTranslations):
    DEFAULT_DOMAIN: str
    plural: Incomplete
    files: Incomplete
    domain: Incomplete
    def __init__(self, fileobj: Incomplete | None = None, domain=...) -> None: ...
    @classmethod
    def load(cls, dirname: Incomplete | None = None, locales: Incomplete | None = None, domain=...): ...
    def add(self, translations, merge: bool = True): ...
    def merge(self, translations): ...
    def dgettext(self, domain, message): ...
    def dugettext(self, domain, message): ...
    def dngettext(self, domain, singular, plural, num): ...
    def dungettext(self, domain, singular, plural, num): ...

class LocalizerRequestMixin:
    def localizer(self): ...
    def locale_name(self): ...
