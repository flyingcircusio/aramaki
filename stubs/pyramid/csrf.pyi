from _typeshed import Incomplete
from pyramid.exceptions import BadCSRFOrigin as BadCSRFOrigin, BadCSRFToken as BadCSRFToken
from pyramid.interfaces import ICSRFStoragePolicy as ICSRFStoragePolicy
from pyramid.settings import aslist as aslist
from pyramid.util import SimpleSerializer as SimpleSerializer, bytes_ as bytes_, is_same_domain as is_same_domain, strings_differ as strings_differ, text_ as text_

class LegacySessionCSRFStoragePolicy:
    def new_csrf_token(self, request): ...
    def get_csrf_token(self, request): ...
    def check_csrf_token(self, request, supplied_token): ...

class SessionCSRFStoragePolicy:
    key: Incomplete
    def __init__(self, key: str = '_csrft_') -> None: ...
    def new_csrf_token(self, request): ...
    def get_csrf_token(self, request): ...
    def check_csrf_token(self, request, supplied_token): ...

class CookieCSRFStoragePolicy:
    cookie_profile: Incomplete
    cookie_name: Incomplete
    def __init__(self, cookie_name: str = 'csrf_token', secure: bool = False, httponly: bool = False, domain: Incomplete | None = None, max_age: Incomplete | None = None, path: str = '/', samesite: str = 'Lax') -> None: ...
    def new_csrf_token(self, request): ...
    def get_csrf_token(self, request): ...
    def check_csrf_token(self, request, supplied_token): ...

def get_csrf_token(request): ...
def new_csrf_token(request): ...
def check_csrf_token(request, token: str = 'csrf_token', header: str = 'X-CSRF-Token', raises: bool = True): ...
def check_csrf_origin(request, *, trusted_origins: Incomplete | None = None, allow_no_origin: bool = False, raises: bool = True): ...
