from _typeshed import Incomplete
from pyramid import renderers as renderers
from pyramid.asset import resolve_asset_spec as resolve_asset_spec
from pyramid.config.actions import action_method as action_method
from pyramid.config.predicates import DEFAULT_PHASH as DEFAULT_PHASH, MAX_ORDER as MAX_ORDER, normalize_accept_offer as normalize_accept_offer, predvalseq as predvalseq, sort_accept_offers as sort_accept_offers
from pyramid.decorator import reify as reify
from pyramid.exceptions import ConfigurationError as ConfigurationError, PredicateMismatch as PredicateMismatch
from pyramid.httpexceptions import HTTPForbidden as HTTPForbidden, HTTPNotFound as HTTPNotFound, default_exceptionresponse_view as default_exceptionresponse_view
from pyramid.interfaces import IAcceptOrder as IAcceptOrder, IException as IException, IExceptionViewClassifier as IExceptionViewClassifier, IMultiView as IMultiView, IPackageOverrides as IPackageOverrides, IRendererFactory as IRendererFactory, IRequest as IRequest, IResponse as IResponse, IRouteRequest as IRouteRequest, ISecuredView as ISecuredView, IStaticURLInfo as IStaticURLInfo, IView as IView, IViewClassifier as IViewClassifier, IViewDeriverInfo as IViewDeriverInfo, IViewDerivers as IViewDerivers, IViewMapperFactory as IViewMapperFactory, PHASE1_CONFIG as PHASE1_CONFIG
from pyramid.registry import Deferred as Deferred
from pyramid.security import NO_PERMISSION_REQUIRED as NO_PERMISSION_REQUIRED
from pyramid.static import static_view as static_view
from pyramid.url import parse_url_overrides as parse_url_overrides
from pyramid.util import TopologicalSorter as TopologicalSorter, WIN as WIN, as_sorted_tuple as as_sorted_tuple, is_nonstr_iter as is_nonstr_iter
from pyramid.view import AppendSlashNotFoundViewFactory as AppendSlashNotFoundViewFactory
from pyramid.viewderivers import DefaultViewMapper as DefaultViewMapper, INGRESS as INGRESS, VIEW as VIEW, preserve_view_attrs as preserve_view_attrs, requestonly as requestonly, view_description as view_description, wraps_view as wraps_view

DefaultViewMapper = DefaultViewMapper
preserve_view_attrs = preserve_view_attrs
requestonly = requestonly
view_description = view_description

class MultiView:
    name: Incomplete
    media_views: Incomplete
    views: Incomplete
    accepts: Incomplete
    def __init__(self, name) -> None: ...
    def __discriminator__(self, context, request): ...
    def add(self, view, order, phash: Incomplete | None = None, accept: Incomplete | None = None, accept_order: Incomplete | None = None) -> None: ...
    def get_views(self, request): ...
    def match(self, context, request): ...
    def __permitted__(self, context, request): ...
    def __call_permissive__(self, context, request): ...
    def __call__(self, context, request): ...

def attr_wrapped_view(view, info): ...
def predicated_view(view, info): ...
def viewdefaults(wrapped): ...
def combine_decorators(*decorators): ...

class ViewsConfiguratorMixin:
    def add_view(self, view: Incomplete | None = None, name: str = '', for_: Incomplete | None = None, permission: Incomplete | None = None, request_type: Incomplete | None = None, route_name: Incomplete | None = None, request_method: Incomplete | None = None, request_param: Incomplete | None = None, containment: Incomplete | None = None, attr: Incomplete | None = None, renderer: Incomplete | None = None, wrapper: Incomplete | None = None, xhr: Incomplete | None = None, accept: Incomplete | None = None, header: Incomplete | None = None, path_info: Incomplete | None = None, custom_predicates=(), context: Incomplete | None = None, decorator: Incomplete | None = None, mapper: Incomplete | None = None, http_cache: Incomplete | None = None, match_param: Incomplete | None = None, require_csrf: Incomplete | None = None, exception_only: bool = False, **view_options): ...
    def add_view_predicate(self, name, factory, weighs_more_than: Incomplete | None = None, weighs_less_than: Incomplete | None = None) -> None: ...
    def add_default_view_predicates(self) -> None: ...
    def add_default_accept_view_order(self) -> None: ...
    def add_accept_view_order(self, value, weighs_more_than: Incomplete | None = None, weighs_less_than: Incomplete | None = None): ...
    def add_view_deriver(self, deriver, name: Incomplete | None = None, under: Incomplete | None = None, over: Incomplete | None = None) -> None: ...
    def add_default_view_derivers(self) -> None: ...
    def derive_view(self, view, attr: Incomplete | None = None, renderer: Incomplete | None = None): ...
    def add_forbidden_view(self, view: Incomplete | None = None, attr: Incomplete | None = None, renderer: Incomplete | None = None, wrapper: Incomplete | None = None, route_name: Incomplete | None = None, request_type: Incomplete | None = None, request_method: Incomplete | None = None, request_param: Incomplete | None = None, containment: Incomplete | None = None, xhr: Incomplete | None = None, accept: Incomplete | None = None, header: Incomplete | None = None, path_info: Incomplete | None = None, custom_predicates=(), decorator: Incomplete | None = None, mapper: Incomplete | None = None, match_param: Incomplete | None = None, **view_options): ...
    set_forbidden_view = add_forbidden_view
    def add_notfound_view(self, view: Incomplete | None = None, attr: Incomplete | None = None, renderer: Incomplete | None = None, wrapper: Incomplete | None = None, route_name: Incomplete | None = None, request_type: Incomplete | None = None, request_method: Incomplete | None = None, request_param: Incomplete | None = None, containment: Incomplete | None = None, xhr: Incomplete | None = None, accept: Incomplete | None = None, header: Incomplete | None = None, path_info: Incomplete | None = None, custom_predicates=(), decorator: Incomplete | None = None, mapper: Incomplete | None = None, match_param: Incomplete | None = None, append_slash: bool = False, **view_options): ...
    set_notfound_view = add_notfound_view
    def add_exception_view(self, view: Incomplete | None = None, context: Incomplete | None = None, **view_options): ...
    def set_view_mapper(self, mapper) -> None: ...
    def add_static_view(self, name, path, **kw) -> None: ...
    def add_cache_buster(self, path, cachebust, explicit: bool = False) -> None: ...

def isexception(o): ...
def runtime_exc_view(view, excview): ...

class ViewDeriverInfo:
    original_view: Incomplete
    registry: Incomplete
    package: Incomplete
    predicates: Incomplete
    options: Incomplete
    exception_only: Incomplete
    def __init__(self, view, registry, package, predicates, exception_only, options) -> None: ...
    def settings(self): ...

class StaticURLInfo:
    registrations: Incomplete
    cache_busters: Incomplete
    def __init__(self) -> None: ...
    def generate(self, path, request, **kw): ...
    def add(self, config, name, spec, **extra) -> None: ...
    def add_cache_buster(self, config, spec, cachebust, explicit: bool = False) -> None: ...
