from _typeshed import Incomplete

__all__ = ['middleware']

class WSGIWarning(Warning): ...

def middleware(application, global_conf: Incomplete | None = None): ...

class InputWrapper:
    input: Incomplete
    def __init__(self, wsgi_input) -> None: ...
    def read(self, *args): ...
    def readline(self, *args): ...
    def readlines(self, *args): ...
    def __iter__(self): ...
    def close(self) -> None: ...
    def seek(self, *a, **kw): ...

class ErrorWrapper:
    errors: Incomplete
    def __init__(self, wsgi_errors) -> None: ...
    def write(self, s) -> None: ...
    def flush(self) -> None: ...
    def writelines(self, seq) -> None: ...
    def close(self) -> None: ...

class WriteWrapper:
    writer: Incomplete
    def __init__(self, wsgi_writer) -> None: ...
    def __call__(self, s) -> None: ...

class IteratorWrapper:
    original_iterator: Incomplete
    iterator: Incomplete
    closed: bool
    check_start_response: Incomplete
    def __init__(self, wsgi_iterator, check_start_response) -> None: ...
    def __iter__(self): ...
    def next(self): ...
    __next__ = next
    def close(self) -> None: ...
    def __del__(self) -> None: ...
