from _typeshed import Incomplete
from webtest import utils as utils

class NoValue: ...

class Upload:
    filename: Incomplete
    content: Incomplete
    content_type: Incomplete
    def __init__(self, filename, content: Incomplete | None = None, content_type: Incomplete | None = None) -> None: ...
    def __iter__(self): ...

class Field:
    classes: Incomplete
    form: Incomplete
    tag: Incomplete
    name: Incomplete
    pos: Incomplete
    id: Incomplete
    attrs: Incomplete
    def __init__(self, form, tag, name, pos, value: Incomplete | None = None, id: Incomplete | None = None, **attrs) -> None: ...
    def value__get(self): ...
    def value__set(self, value) -> None: ...
    value: Incomplete
    def force_value(self, value) -> None: ...

class Select(Field):
    options: Incomplete
    optionPositions: Incomplete
    selectedIndex: Incomplete
    def __init__(self, *args, **attrs) -> None: ...
    value: Incomplete
    def force_value(self, value) -> None: ...
    def select(self, value: Incomplete | None = None, text: Incomplete | None = None) -> None: ...
    def value__set(self, value) -> None: ...
    def value__get(self): ...

class MultipleSelect(Field):
    options: Incomplete
    selectedIndices: Incomplete
    def __init__(self, *args, **attrs) -> None: ...
    def force_value(self, values) -> None: ...
    value: Incomplete
    def select_multiple(self, value: Incomplete | None = None, texts: Incomplete | None = None) -> None: ...
    def value__set(self, values) -> None: ...
    def value__get(self): ...

class Radio(Select):
    def value__get(self): ...
    value: Incomplete

class Checkbox(Field):
    def __init__(self, *args, **attrs) -> None: ...
    def value__set(self, value) -> None: ...
    def value__get(self): ...
    value: Incomplete
    def checked__get(self): ...
    def checked__set(self, value) -> None: ...
    checked: Incomplete

class Text(Field): ...
class Email(Field): ...

class File(Field):
    def value__get(self): ...
    value: Incomplete

class Textarea(Text): ...
class Hidden(Text): ...

class Submit(Field):
    def value__get(self) -> None: ...
    def value__set(self, value) -> None: ...
    value: Incomplete
    def value_if_submitted(self): ...

class Form:
    FieldClass = Field
    response: Incomplete
    text: Incomplete
    html: Incomplete
    action: Incomplete
    method: Incomplete
    id: Incomplete
    enctype: Incomplete
    def __init__(self, response, text, parser_features: str = 'html.parser') -> None: ...
    def __setitem__(self, name, value) -> None: ...
    def __getitem__(self, name): ...
    def lint(self) -> None: ...
    def set(self, name, value, index: Incomplete | None = None) -> None: ...
    def get(self, name, index: Incomplete | None = None, default=...): ...
    def select(self, name, value: Incomplete | None = None, text: Incomplete | None = None, index: Incomplete | None = None) -> None: ...
    def select_multiple(self, name, value: Incomplete | None = None, texts: Incomplete | None = None, index: Incomplete | None = None) -> None: ...
    def submit(self, name: Incomplete | None = None, index: Incomplete | None = None, value: Incomplete | None = None, **args): ...
    def upload_fields(self): ...
    def submit_fields(self, name: Incomplete | None = None, index: Incomplete | None = None, submit_value: Incomplete | None = None): ...
