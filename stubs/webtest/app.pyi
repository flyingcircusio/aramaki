import webob
from _typeshed import Incomplete
from http import cookiejar as http_cookiejar
from webtest.response import TestResponse

__all__ = ['TestApp', 'TestRequest']

class AppError(Exception):
    def __init__(self, message, *args) -> None: ...

class CookiePolicy(http_cookiejar.DefaultCookiePolicy):
    def return_ok_domain(self, cookie, request): ...
    def set_ok_domain(self, cookie, request): ...

class TestRequest(webob.BaseRequest):
    ResponseClass = TestResponse

class TestApp:
    RequestClass = TestRequest
    __test__: bool
    app: Incomplete
    lint: Incomplete
    relative_to: Incomplete
    extra_environ: Incomplete
    use_unicode: Incomplete
    cookiejar: Incomplete
    JSONEncoder: Incomplete
    def __init__(self, app, extra_environ: Incomplete | None = None, relative_to: Incomplete | None = None, use_unicode: bool = True, cookiejar: Incomplete | None = None, parser_features: Incomplete | None = None, json_encoder: Incomplete | None = None, lint: bool = True) -> None: ...
    def get_authorization(self): ...
    authorization_value: Incomplete
    def set_authorization(self, value) -> None: ...
    authorization: Incomplete
    @property
    def cookies(self): ...
    def set_cookie(self, name, value) -> None: ...
    def reset(self) -> None: ...
    def set_parser_features(self, parser_features) -> None: ...
    def get(self, url, params: Incomplete | None = None, headers: Incomplete | None = None, extra_environ: Incomplete | None = None, status: Incomplete | None = None, expect_errors: bool = False, xhr: bool = False): ...
    def post(self, url, params: str = '', headers: Incomplete | None = None, extra_environ: Incomplete | None = None, status: Incomplete | None = None, upload_files: Incomplete | None = None, expect_errors: bool = False, content_type: Incomplete | None = None, xhr: bool = False): ...
    def put(self, url, params: str = '', headers: Incomplete | None = None, extra_environ: Incomplete | None = None, status: Incomplete | None = None, upload_files: Incomplete | None = None, expect_errors: bool = False, content_type: Incomplete | None = None, xhr: bool = False): ...
    def patch(self, url, params: str = '', headers: Incomplete | None = None, extra_environ: Incomplete | None = None, status: Incomplete | None = None, upload_files: Incomplete | None = None, expect_errors: bool = False, content_type: Incomplete | None = None, xhr: bool = False): ...
    def delete(self, url, params: str = '', headers: Incomplete | None = None, extra_environ: Incomplete | None = None, status: Incomplete | None = None, expect_errors: bool = False, content_type: Incomplete | None = None, xhr: bool = False): ...
    def options(self, url, headers: Incomplete | None = None, extra_environ: Incomplete | None = None, status: Incomplete | None = None, expect_errors: bool = False, xhr: bool = False): ...
    def head(self, url, params: Incomplete | None = None, headers: Incomplete | None = None, extra_environ: Incomplete | None = None, status: Incomplete | None = None, expect_errors: bool = False, xhr: bool = False): ...
    post_json: Incomplete
    put_json: Incomplete
    patch_json: Incomplete
    delete_json: Incomplete
    def encode_multipart(self, params, files): ...
    def request(self, url_or_req, status: Incomplete | None = None, expect_errors: bool = False, **req_params): ...
    def do_request(self, req, status: Incomplete | None = None, expect_errors: Incomplete | None = None): ...
