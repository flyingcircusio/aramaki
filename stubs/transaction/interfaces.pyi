from _typeshed import Incomplete
from zope.interface import Interface

class ITransactionManager(Interface):
    explicit: Incomplete
    def begin() -> None: ...
    def get() -> None: ...
    def commit() -> None: ...
    def abort() -> None: ...
    def doom() -> None: ...
    def isDoomed() -> None: ...
    def savepoint(optimistic: bool = False) -> None: ...
    def registerSynch(synch) -> None: ...
    def unregisterSynch(synch) -> None: ...
    def clearSynchs() -> None: ...
    def registeredSynchs() -> None: ...
    def attempts(number: int = 3) -> None: ...
    def run(func: Incomplete | None = None, tries: int = 3) -> None: ...

class ITransaction(Interface):
    user: Incomplete
    description: Incomplete
    extension: Incomplete
    def commit() -> None: ...
    def abort() -> None: ...
    def doom() -> None: ...
    def savepoint(optimistic: bool = False) -> None: ...
    def join(datamanager) -> None: ...
    def note(text) -> None: ...
    def setExtendedInfo(name, value) -> None: ...
    def addBeforeCommitHook(hook, args=(), kws: Incomplete | None = None) -> None: ...
    def getBeforeCommitHooks() -> None: ...
    def addAfterCommitHook(hook, args=(), kws: Incomplete | None = None) -> None: ...
    def getAfterCommitHooks() -> None: ...
    def addBeforeAbortHook(hook, args=(), kws: Incomplete | None = None) -> None: ...
    def getBeforeAbortHooks() -> None: ...
    def addAfterAbortHook(hook, args=(), kws: Incomplete | None = None) -> None: ...
    def getAfterAbortHooks() -> None: ...
    def set_data(ob, data) -> None: ...
    def data(ob) -> None: ...
    def isRetryableError(error) -> None: ...

class IDataManager(Interface):
    transaction_manager: Incomplete
    def abort(transaction) -> None: ...
    def tpc_begin(transaction) -> None: ...
    def commit(transaction) -> None: ...
    def tpc_vote(transaction) -> None: ...
    def tpc_finish(transaction) -> None: ...
    def tpc_abort(transaction) -> None: ...
    def sortKey() -> None: ...

class ISavepointDataManager(IDataManager):
    def savepoint() -> None: ...

class IRetryDataManager(IDataManager):
    def should_retry(exception) -> None: ...

class IDataManagerSavepoint(Interface):
    def rollback() -> None: ...

class ISavepoint(Interface):
    def rollback() -> None: ...
    valid: Incomplete

class InvalidSavepointRollbackError(Exception): ...

class ISynchronizer(Interface):
    def beforeCompletion(transaction) -> None: ...
    def afterCompletion(transaction) -> None: ...
    def newTransaction(transaction) -> None: ...

class TransactionError(Exception): ...
class TransactionFailedError(TransactionError): ...
class DoomedTransaction(TransactionError): ...
class TransientError(TransactionError): ...
class NoTransaction(TransactionError): ...
class AlreadyInTransaction(TransactionError): ...
