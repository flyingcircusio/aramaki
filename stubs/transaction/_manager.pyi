import threading
from _typeshed import Incomplete
from collections.abc import Generator
from transaction._compat import reraise as reraise, text_ as text_
from transaction._transaction import Transaction as Transaction
from transaction.interfaces import AlreadyInTransaction as AlreadyInTransaction, ITransactionManager as ITransactionManager, NoTransaction as NoTransaction, TransientError as TransientError
from transaction.weakset import WeakSet as WeakSet

class TransactionManager:
    explicit: Incomplete
    def __init__(self, explicit: bool = False) -> None: ...
    def begin(self): ...
    def __enter__(self): ...
    def get(self): ...
    def free(self, txn) -> None: ...
    def registerSynch(self, synch) -> None: ...
    def unregisterSynch(self, synch) -> None: ...
    def clearSynchs(self) -> None: ...
    def registeredSynchs(self): ...
    def isDoomed(self): ...
    def doom(self): ...
    def commit(self): ...
    def abort(self): ...
    def __exit__(self, t: type[BaseException] | None, v: BaseException | None, tb: types.TracebackType | None) -> None: ...
    def savepoint(self, optimistic: bool = False): ...
    def attempts(self, number: int = 3) -> Generator[Incomplete, None, None]: ...
    run_no_func_types: Incomplete
    def run(self, func: Incomplete | None = None, tries: int = 3): ...

class ThreadTransactionManager(threading.local):
    manager: Incomplete
    def __init__(self) -> None: ...
    @property
    def explicit(self): ...
    @explicit.setter
    def explicit(self, v) -> None: ...
    def begin(self): ...
    def get(self): ...
    def __enter__(self): ...
    def commit(self): ...
    def abort(self): ...
    def __exit__(self, t: type[BaseException] | None, v: BaseException | None, tb: types.TracebackType | None): ...
    def doom(self): ...
    def isDoomed(self): ...
    def savepoint(self, optimistic: bool = False): ...
    def registerSynch(self, synch): ...
    def unregisterSynch(self, synch): ...
    def clearSynchs(self): ...
    def registeredSynchs(self): ...
    def attempts(self, number: int = 3): ...
    def run(self, func: Incomplete | None = None, tries: int = 3): ...

class Attempt:
    success: bool
    manager: Incomplete
    def __init__(self, manager) -> None: ...
    def __enter__(self): ...
    def __exit__(self, t: type[BaseException] | None, v: BaseException | None, tb: types.TracebackType | None): ...
