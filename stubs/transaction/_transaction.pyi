from _typeshed import Incomplete
from transaction import interfaces as interfaces
from transaction._compat import StringIO as StringIO, get_thread_ident as get_thread_ident, reraise as reraise, text_type as text_type
from transaction.interfaces import TransactionFailedError as TransactionFailedError
from transaction.weakset import WeakSet as WeakSet

class Status:
    ACTIVE: str
    COMMITTING: str
    COMMITTED: str
    DOOMED: str
    COMMITFAILED: str

class _NoSynchronizers:
    @staticmethod
    def map(_f) -> None: ...

class Transaction:
    status: Incomplete
    extension: Incomplete
    log: Incomplete
    def __init__(self, synchronizers: Incomplete | None = None, manager: Incomplete | None = None) -> None: ...
    @property
    def user(self): ...
    @user.setter
    def user(self, v) -> None: ...
    @property
    def description(self): ...
    @description.setter
    def description(self, v) -> None: ...
    def isDoomed(self): ...
    def doom(self) -> None: ...
    def join(self, resource) -> None: ...
    def savepoint(self, optimistic: bool = False): ...
    def commit(self): ...
    def getBeforeCommitHooks(self): ...
    def addBeforeCommitHook(self, hook, args=(), kws: Incomplete | None = None) -> None: ...
    def getAfterCommitHooks(self): ...
    def addAfterCommitHook(self, hook, args=(), kws: Incomplete | None = None) -> None: ...
    def getBeforeAbortHooks(self): ...
    def addBeforeAbortHook(self, hook, args=(), kws: Incomplete | None = None) -> None: ...
    def getAfterAbortHooks(self): ...
    def addAfterAbortHook(self, hook, args=(), kws: Incomplete | None = None) -> None: ...
    def data(self, ob): ...
    def set_data(self, ob, ob_data) -> None: ...
    def abort(self): ...
    def note(self, text) -> None: ...
    def setUser(self, user_name, path: str = '/') -> None: ...
    def setExtendedInfo(self, name, value) -> None: ...
    def isRetryableError(self, error): ...

def rm_key(rm): ...

class Savepoint:
    transaction: Incomplete
    def __init__(self, transaction, optimistic, *resources) -> None: ...
    @property
    def valid(self): ...
    def rollback(self) -> None: ...

class AbortSavepoint:
    datamanager: Incomplete
    transaction: Incomplete
    def __init__(self, datamanager, transaction) -> None: ...
    def rollback(self) -> None: ...

class NoRollbackSavepoint:
    datamanager: Incomplete
    def __init__(self, datamanager) -> None: ...
    def rollback(self) -> None: ...

def text_or_warn(s): ...
