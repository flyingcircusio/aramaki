from _typeshed import Incomplete
from collections.abc import MutableMapping
from zope.testbrowser import interfaces as interfaces, utils as utils

class BrowserStateError(Exception): ...

class _StubHTTPMessage:
    def __init__(self, cookies) -> None: ...
    def getheaders(self, name, default=[]): ...
    get_all = getheaders

class _StubResponse:
    message: Incomplete
    def __init__(self, cookies) -> None: ...
    def info(self): ...

DAY_OF_WEEK: Incomplete
MONTH: Incomplete

def expiration_string(expires): ...

class Cookies(MutableMapping):
    testapp: Incomplete
    def __init__(self, testapp, url: Incomplete | None = None, req_headers: Incomplete | None = None) -> None: ...
    @property
    def strict_domain_policy(self): ...
    @strict_domain_policy.setter
    def strict_domain_policy(self, value) -> None: ...
    def forURL(self, url): ...
    @property
    def url(self): ...
    @property
    def header(self): ...
    def __getitem__(self, key): ...
    def getinfo(self, key): ...
    def keys(self): ...
    def __iter__(self): ...
    iterkeys = __iter__
    def iterinfo(self, key: Incomplete | None = None): ...
    def iteritems(self): ...
    def has_key(self, key): ...
    __contains__ = has_key
    def __len__(self) -> int: ...
    def __delitem__(self, key) -> None: ...
    def create(self, name, value, domain: Incomplete | None = None, expires: Incomplete | None = None, path: Incomplete | None = None, secure: Incomplete | None = None, comment: Incomplete | None = None, commenturl: Incomplete | None = None, port: Incomplete | None = None) -> None: ...
    def change(self, name, value: Incomplete | None = None, domain: Incomplete | None = None, expires: Incomplete | None = None, path: Incomplete | None = None, secure: Incomplete | None = None, comment: Incomplete | None = None, commenturl: Incomplete | None = None, port: Incomplete | None = None) -> None: ...
    def __setitem__(self, key, value) -> None: ...
    def clear(self) -> None: ...
    def clearAllSession(self) -> None: ...
    def clearAll(self) -> None: ...
    def pop(self, k, *args) -> None: ...
    def itervalues(self): ...
    def iterkeys(self): ...
