import urllib
import webtest
from _typeshed import Incomplete
from collections.abc import Generator
from zope.cachedescriptors.property import Lazy as Lazy
from zope.interface import implementer as implementer
from zope.testbrowser import interfaces as interfaces

__docformat__: str
HTTPError = urllib.request.HTTPError
RegexType: Incomplete

class HostNotAllowed(Exception): ...

class RobotExclusionError(HTTPError):
    def __init__(self, *args) -> None: ...

REDIRECTS: Incomplete

class TestbrowserApp(webtest.TestApp):
    restricted: bool
    def do_request(self, req, status, expect_errors): ...
    def getRequestUrlWithFragment(self, response): ...

class SetattrErrorsMixin:
    def __setattr__(self, name, value) -> None: ...

class Browser(SetattrErrorsMixin):
    timer: Incomplete
    raiseHttpErrors: bool
    handleErrors: bool
    followRedirects: bool
    testapp: Incomplete
    def __init__(self, url: Incomplete | None = None, wsgi_app: Incomplete | None = None) -> None: ...
    @property
    def url(self): ...
    @property
    def isHtml(self): ...
    @property
    def lastRequestSeconds(self): ...
    @property
    def title(self): ...
    def reload(self): ...
    def goBack(self, count: int = 1) -> None: ...
    @property
    def contents(self): ...
    @property
    def headers(self): ...
    @property
    def cookies(self): ...
    def addHeader(self, key, value) -> None: ...
    def open(self, url, data: Incomplete | None = None, referrer: Incomplete | None = None): ...
    def post(self, url, data, content_type: Incomplete | None = None, referrer: Incomplete | None = None): ...
    def getLink(self, text: Incomplete | None = None, url: Incomplete | None = None, id: Incomplete | None = None, index: int = 0): ...
    def follow(self, *args, **kw) -> None: ...
    def getForm(self, id: Incomplete | None = None, name: Incomplete | None = None, action: Incomplete | None = None, index: Incomplete | None = None): ...
    def getControl(self, label: Incomplete | None = None, name: Incomplete | None = None, index: Incomplete | None = None): ...
    def toStr(self, s): ...

def controlFactory(name, wtcontrols, elemindex, browser): ...
def simpleControlFactory(wtcontrol, form, elemindex, browser): ...

class Link(SetattrErrorsMixin):
    browser: Incomplete
    def __init__(self, link, browser, baseurl: str = '') -> None: ...
    def click(self) -> None: ...
    @property
    def url(self): ...
    @property
    def text(self): ...
    @property
    def tag(self): ...
    @property
    def attrs(self): ...

def controlFormTupleRepr(wtcontrol): ...

class Control(SetattrErrorsMixin):
    browser: Incomplete
    def __init__(self, control, form, elem, browser) -> None: ...
    @property
    def disabled(self): ...
    @property
    def readonly(self): ...
    @property
    def type(self): ...
    @property
    def name(self): ...
    @property
    def multiple(self): ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value) -> None: ...
    def add_file(self, file, content_type, filename) -> None: ...
    def clear(self) -> None: ...
    def labels(self): ...
    @property
    def controls(self): ...
    def mechRepr(self): ...

class SubmitControl(Control):
    def click(self) -> None: ...
    def labels(self): ...
    def mechRepr(self): ...

class ListControl(Control):
    def __init__(self, control, form, elem, browser) -> None: ...
    @property
    def type(self): ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value) -> None: ...
    @property
    def displayValue(self): ...
    @displayValue.setter
    def displayValue(self, value) -> None: ...
    @property
    def displayOptions(self): ...
    @property
    def options(self): ...
    def getControl(self, label: Incomplete | None = None, value: Incomplete | None = None, index: Incomplete | None = None): ...
    @property
    def controls(self): ...
    def mechRepr(self): ...

class RadioListControl(ListControl):
    def __init__(self, control, form, elems, browser) -> None: ...
    @property
    def type(self): ...
    @property
    def controls(self) -> Generator[Incomplete, None, None]: ...
    def labels(self): ...

class CheckboxListControl(SetattrErrorsMixin):
    name: Incomplete
    browser: Incomplete
    def __init__(self, name, ctrlelems, browser) -> None: ...
    @property
    def options(self): ...
    @property
    def displayOptions(self): ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value) -> None: ...
    @property
    def displayValue(self): ...
    @displayValue.setter
    def displayValue(self, value) -> None: ...
    @property
    def multiple(self): ...
    @property
    def disabled(self): ...
    @property
    def type(self): ...
    def getControl(self, label: Incomplete | None = None, value: Incomplete | None = None, index: Incomplete | None = None): ...
    @property
    def controls(self): ...
    def clear(self) -> None: ...
    def mechRepr(self): ...
    def labels(self): ...

class ImageControl(Control):
    def click(self, coord=(1, 1)) -> None: ...
    def mechRepr(self): ...

class ItemControl(SetattrErrorsMixin):
    browser: Incomplete
    def __init__(self, parent, elem, form, browser, index) -> None: ...
    @property
    def control(self): ...
    @property
    def disabled(self): ...
    @property
    def selected(self): ...
    @selected.setter
    def selected(self, value) -> None: ...
    @property
    def optionValue(self): ...
    @property
    def value(self): ...
    def click(self) -> None: ...
    def labels(self): ...
    def mechRepr(self): ...

class RadioItemControl(ItemControl):
    @property
    def optionValue(self): ...
    def labels(self): ...
    def click(self) -> None: ...
    def mechRepr(self): ...

class CheckboxItemControl(ItemControl):
    def __init__(self, parent, wtcontrol, elem, form, browser, index) -> None: ...
    @property
    def selected(self): ...
    @selected.setter
    def selected(self, value) -> None: ...
    @property
    def optionValue(self): ...
    def labels(self): ...
    def mechRepr(self): ...

class Form(SetattrErrorsMixin):
    browser: Incomplete
    def __init__(self, browser, form) -> None: ...
    @property
    def action(self): ...
    @property
    def method(self): ...
    @property
    def enctype(self): ...
    @property
    def name(self): ...
    @property
    def id(self): ...
    def submit(self, label: Incomplete | None = None, name: Incomplete | None = None, index: Incomplete | None = None, coord: Incomplete | None = None) -> None: ...
    def getControl(self, label: Incomplete | None = None, name: Incomplete | None = None, index: Incomplete | None = None): ...
    @property
    def controls(self): ...

def disambiguate(intermediate, msg, index, choice_repr: Incomplete | None = None, available: Incomplete | None = None): ...
def onlyOne(items, description) -> None: ...
def zeroOrOne(items, description) -> None: ...
def getControl(controls, label: Incomplete | None = None, value: Incomplete | None = None, index: Incomplete | None = None): ...
def getControlLabels(celem, html): ...
def normalizeWhitespace(string): ...
def isMatching(string, expr): ...

class Timer:
    start_time: int
    end_time: int
    def start(self) -> None: ...
    def stop(self) -> None: ...
    @property
    def elapsedSeconds(self): ...
    def __enter__(self) -> None: ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: types.TracebackType | None) -> None: ...

class History:
    def __init__(self) -> None: ...
    def add(self, response) -> None: ...
    def back(self, n, _response): ...
    def clear(self) -> None: ...

class AmbiguityError(ValueError): ...
class BrowserStateError(Exception): ...
class LinkNotFoundError(IndexError): ...
class ItemCountError(ValueError): ...
class ItemNotFoundError(ValueError): ...
