from _typeshed import Incomplete
from zope.interface import implementer as implementer

STATUS_ACTIVE: str
STATUS_CHANGED: str
STATUS_READONLY: str
STATUS_INVALIDATED = STATUS_CHANGED
NO_SAVEPOINT_SUPPORT: Incomplete
SA_GE_14: Incomplete

class SessionDataManager:
    transaction_manager: Incomplete
    tx: Incomplete
    session: Incomplete
    state: str
    keep_session: Incomplete
    def __init__(self, session, status, transaction_manager, keep_session: bool = False) -> None: ...
    def abort(self, trans) -> None: ...
    def tpc_begin(self, trans) -> None: ...
    def commit(self, trans) -> None: ...
    def tpc_vote(self, trans) -> None: ...
    def tpc_finish(self, trans) -> None: ...
    def tpc_abort(self, trans) -> None: ...
    def sortKey(self): ...
    @property
    def savepoint(self): ...
    def should_retry(self, error): ...

class TwoPhaseSessionDataManager(SessionDataManager):
    state: str
    def tpc_vote(self, trans) -> None: ...
    def tpc_finish(self, trans) -> None: ...
    def tpc_abort(self, trans) -> None: ...
    def sortKey(self): ...

class SessionSavepoint:
    session: Incomplete
    transaction: Incomplete
    def __init__(self, session) -> None: ...
    def rollback(self) -> None: ...

def join_transaction(session, initial_state=..., transaction_manager=..., keep_session: bool = False) -> None: ...
def mark_changed(session, transaction_manager=..., keep_session: bool = False) -> None: ...

class ZopeTransactionEvents:
    initial_state: Incomplete
    transaction_manager: Incomplete
    keep_session: Incomplete
    def __init__(self, initial_state=..., transaction_manager=..., keep_session: bool = False) -> None: ...
    def after_begin(self, session, transaction, connection) -> None: ...
    def after_attach(self, session, instance) -> None: ...
    def after_flush(self, session, flush_context) -> None: ...
    def after_bulk_update(self, update_context) -> None: ...
    def after_bulk_delete(self, delete_context) -> None: ...
    def before_commit(self, session) -> None: ...
    def do_orm_execute(self, execute_state) -> None: ...
    def mark_changed(self, session) -> None: ...
    def join_transaction(self, session) -> None: ...

def register(session, initial_state=..., transaction_manager=..., keep_session: bool = False): ...
