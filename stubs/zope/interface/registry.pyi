from _typeshed import Incomplete
from collections.abc import Generator

__all__ = ['Components']

class _UnhashableComponentCounter:
    def __init__(self, otherdict) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, component, count) -> None: ...
    def __delitem__(self, component) -> None: ...

class _UtilityRegistrations:
    def __init__(self, utilities, utility_registrations) -> None: ...
    def registerUtility(self, provided, name, component, info, factory) -> None: ...
    def unregisterUtility(self, provided, name, component) -> None: ...

class Components:
    __bases__: Incomplete
    def __init__(self, name: str = '', bases=()) -> None: ...
    def __reduce__(self): ...
    def registerUtility(self, component: Incomplete | None = None, provided: Incomplete | None = None, name: str = '', info: str = '', event: bool = True, factory: Incomplete | None = None) -> None: ...
    def unregisterUtility(self, component: Incomplete | None = None, provided: Incomplete | None = None, name: str = '', factory: Incomplete | None = None): ...
    def registeredUtilities(self) -> Generator[Incomplete, None, None]: ...
    def queryUtility(self, provided, name: str = '', default: Incomplete | None = None): ...
    def getUtility(self, provided, name: str = ''): ...
    def getUtilitiesFor(self, interface) -> Generator[Incomplete, Incomplete, None]: ...
    def getAllUtilitiesRegisteredFor(self, interface): ...
    def registerAdapter(self, factory, required: Incomplete | None = None, provided: Incomplete | None = None, name: str = '', info: str = '', event: bool = True) -> None: ...
    def unregisterAdapter(self, factory: Incomplete | None = None, required: Incomplete | None = None, provided: Incomplete | None = None, name: str = ''): ...
    def registeredAdapters(self) -> Generator[Incomplete, None, None]: ...
    def queryAdapter(self, object, interface, name: str = '', default: Incomplete | None = None): ...
    def getAdapter(self, object, interface, name: str = ''): ...
    def queryMultiAdapter(self, objects, interface, name: str = '', default: Incomplete | None = None): ...
    def getMultiAdapter(self, objects, interface, name: str = ''): ...
    def getAdapters(self, objects, provided) -> Generator[Incomplete, None, None]: ...
    def registerSubscriptionAdapter(self, factory, required: Incomplete | None = None, provided: Incomplete | None = None, name: str = '', info: str = '', event: bool = True) -> None: ...
    def registeredSubscriptionAdapters(self) -> Generator[Incomplete, None, None]: ...
    def unregisterSubscriptionAdapter(self, factory: Incomplete | None = None, required: Incomplete | None = None, provided: Incomplete | None = None, name: str = ''): ...
    def subscribers(self, objects, provided): ...
    def registerHandler(self, factory, required: Incomplete | None = None, name: str = '', info: str = '', event: bool = True) -> None: ...
    def registeredHandlers(self) -> Generator[Incomplete, None, None]: ...
    def unregisterHandler(self, factory: Incomplete | None = None, required: Incomplete | None = None, name: str = ''): ...
    def handle(self, *objects) -> None: ...
    def rebuildUtilityRegistryFromLocalCache(self, rebuild: bool = False): ...

class UtilityRegistration:
    def __init__(self, registry, provided, name, component, doc, factory: Incomplete | None = None) -> None: ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class AdapterRegistration:
    def __init__(self, registry, required, provided, name, component, doc) -> None: ...
    def __hash__(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

class SubscriptionRegistration(AdapterRegistration): ...

class HandlerRegistration(AdapterRegistration):
    def __init__(self, registry, required, name, handler, doc) -> None: ...
    @property
    def factory(self): ...
    provided: Incomplete
