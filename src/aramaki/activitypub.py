import uuid

from sqlalchemy import CHAR, JSON, Column

import aramaki.system
from aramaki import context
from aramaki.interfaces.sqlalchemy import Base


class Object(Base):

    __tablename__ = "activitypub_objects"
    uuid = Column(CHAR(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    object = Column(JSON, default=new_object)

    object_id = context.url("/activitypub/objects/{uuid}")

    def __init__(self, object):
        super().__init__(object=object)
        # XXX sqlalchemy defaults come in too late?
        # object["id"] = self.object_id

    def recipients(self):
        to = self.objects.get("to")
        if not to:
            return []
        elif isinstance(to, str):
            return [to]
        return to

    def actor(self):
        return self.object["actor"]

    @classmethod
    def create(cls, object):
        instance = super().create(object=object)
        context.notify_async("activitypub-object-recorded", instance.uiid)


def new_object_dict(**kw):
    obj = {
        "@context": "https://www.w3.org/ns/activitystreams",
    }
    obj.update(kw)
    return obj


@context.handle("new-subsystem-used")
def publish_used_subsystem(subsystem):
    """Internal creation of new activitypub objects
    generated by the domain.
    """
    obj = new_object_dict(
        type="Use",
        actor=subsystem.system.actor_id,
        object=subsystem.id,
        to=subsystem.id,
    )
    yield
    Object.create(object=obj)


@context.handle("activitypub-publish")
def publish(object):
    """Internal creation of new activitypub objects
    generated by the domain.
    """
    yield
    Object.create(object=object)


@context.handle("new-usage-accepted")
def send_usage_accept_response(system, request):
    """ """
    obj = new_object_dict(
        type="Accept",
        actor=system.actor_id,
        object=request.object,
        to=request.object["actor"],
    )
    yield
    Object.create(object=obj)


@context.handle("activitypub-Use")
def dispatch_use_activity(request, recipient):
    recipient.receive_usage_request(request)


@context.handle("activitypub-object-recorded")
def handle_activitypub_event(uuid):
    """We received an activitypub object either from
    the outside world or from within the domain.

    The object has been recorded in the database already.
    """
    # First phase: nothing to to, the object has been
    # persisted already, we can move on to the event-specific transaction.
    object = Object.get(uuid=uuid)
    for to in object.recipients:
        if not to.startswith(context.application_url):
            # XXX send via http to inbox
            pass
        else:
            for system in aramaki.system.System.list():
                if system.actor_id != to:
                    continue
            context.notify("activitypub-" + object.object["type"], object, to)
